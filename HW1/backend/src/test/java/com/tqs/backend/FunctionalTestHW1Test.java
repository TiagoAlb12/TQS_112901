package com.tqs.backend;

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;

import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

public class FunctionalTestHW1Test {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }

  private void handleOptionalAlert() {
    try {
      WebDriverWait wait = new WebDriverWait(driver, java.time.Duration.ofSeconds(3));
      Alert alert = wait.until(ExpectedConditions.alertIsPresent());
      System.out.println("Alerta encontrado: " + alert.getText());
      alert.accept();
    } catch (Exception e) {
      System.out.println("Nenhum alerta presente.");
    }
  }

  private void safeClick(By selector) {
    handleOptionalAlert();

    try {
      WebElement el = new WebDriverWait(driver, Duration.ofSeconds(10))
              .until(ExpectedConditions.elementToBeClickable(selector));

      handleOptionalAlert();

      el.click();

      handleOptionalAlert();

    } catch (UnhandledAlertException e) {
      System.out.println("Alerta inesperado encontrado. A tentar tratar...");
      handleOptionalAlert();

      WebElement el = new WebDriverWait(driver, Duration.ofSeconds(5))
              .until(ExpectedConditions.elementToBeClickable(selector));
      el.click();
      handleOptionalAlert();
    }
  }

  @Test
  public void functionalTestHW1() {
    // Test name: FunctionalTest_HW1
    // Step # | name | target | value
    // 1 | open | / |
    driver.get("http://localhost:3000/");
    // 2 | setWindowSize | 1854x1011 |
    driver.manage().window().setSize(new Dimension(1854, 1011));
    // 3 | click | css=.enter-button |
    driver.findElement(By.cssSelector(".enter-button")).click();
    // Wait to ensure the dropdown is present
    WebDriverWait wait = new WebDriverWait(driver, java.time.Duration.ofSeconds(10));
    wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//option[. = 'Cantina Santiago']")));
    // 4 | select | css=select | label=Cantina Santiago
    {
      WebElement dropdown = driver.findElement(By.cssSelector("select"));
      dropdown.findElement(By.xpath("//option[. = 'Cantina Santiago']")).click();
    }
    // 5 | mouseDownAt | css=select | 0,0
    {
      WebElement element = driver.findElement(By.cssSelector("select"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).clickAndHold().perform();
    }
    // 6 | mouseMoveAt | css=select | 0,0
    {
      WebElement element = driver.findElement(By.cssSelector("select"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 7 | mouseUpAt | css=select | 0,0
    {
      WebElement element = driver.findElement(By.cssSelector("select"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).release().perform();
    }
    // 8 | click | css=tr:nth-child(6) .weather-button |
    wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("tr:nth-child(6) .weather-button")));
    WebElement weatherBtn = driver.findElement(By.cssSelector("tr:nth-child(6) .weather-button"));
    js.executeScript("arguments[0].scrollIntoView(true);", weatherBtn);
    weatherBtn.click();
    // 9 | click | css=.weather-button:nth-child(5) |
    driver.findElement(By.cssSelector(".weather-button:nth-child(5)")).click();
    // 10 | click | css=tr:nth-child(1) .reservation-btn |
    driver.findElement(By.cssSelector("tr:nth-child(1) .reservation-btn")).click();
    // 11 | mouseOver | css=tr:nth-child(1) .reservation-btn |
    {
      WebElement element = driver.findElement(By.cssSelector("tr:nth-child(1) .reservation-btn"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 12 | mouseOut | css=tr:nth-child(1) .reservation-btn |
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }
    // 13 | click | css=.reservation-btn:nth-child(2) |
    driver.findElement(By.cssSelector(".reservation-btn:nth-child(2)")).click();
    // 14 | click | css=.reservation-btn:nth-child(4) |
    WebElement btn = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".reservation-btn:nth-child(4)")));
    btn.click();
    // 15 | click | css=.reservation-button |
    driver.findElement(By.cssSelector(".reservation-button")).click();
    handleOptionalAlert();
    // 16 | click | css=.token-button |
    handleOptionalAlert();
    WebElement tokenButton = new WebDriverWait(driver, Duration.ofSeconds(10))
            .until(ExpectedConditions.elementToBeClickable(By.cssSelector(".token-button")));
    tokenButton.click();

    System.out.println("Reserva feita e token apresentado com sucesso.");
  }
}
